{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>\ud83d\udce5 Installation - Get started with setup and configuration</li> <li>\ud83d\udd27 Code of Conduct - Learn the code</li> <li>\ud83d\udcd8 Development - Follow practical examples and best practices</li> <li>\ud83d\udcd8 Development Fresher Guide - Follow practical examples and best practices</li> <li>\ud83d\udee0\ufe0f Maintenance - Keep your codebase up to date</li> <li>\ud83d\udee0\ufe0f Contributing - Keep your codebase up to date</li> <li>\ud83d\udcc4 Typescript Template - Explore the Typescript template for your projects</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. See standard-version for commit guidelines.</p>"},{"location":"changelog/#021-2021-11-26","title":"0.2.1 (2021-11-26)","text":""},{"location":"changelog/#refactor","title":"Refactor","text":"<p>refactor(a code change that neither fixes a bug nor adds a feature): \u2026 * change structure of clean-code architecture: refactor code of controllers and chnages in clean-code stricture by adding use-case, data-access and little improvements in creating entities. (e78a245)</p>"},{"location":"changelog/#020-2021-11-26","title":"0.2.0 (2021-11-26)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>changes is readme and codegenerator file: improve validation for model and update readme (d8050c1)</li> <li>fix modules overwrite to apis: improve validation for existing models and fix issue of modules (e188b21)</li> </ul>"},{"location":"changelog/#012-2021-11-18","title":"0.1.2 (2021-11-18)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>boilerplate app and postman: provide boilerplate app, model attributes and postman collection (da53141)</li> </ul>"},{"location":"changelog/#011-2021-11-18","title":"0.1.1 (2021-11-18)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>package.json: add changelog in package.json file (edbda79)</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at help@dhiwise.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We would appreciate it if you contributed to the project and helped make it even better. All kind of contributions are welcome, including features, issues, documentation, translation, guides, and more.</p>"},{"location":"contributing/#got-a-question","title":"Got a question?","text":"<p>You can ask questions, consult with more experienced DhiWise users, and discuss DhiWise-related topics in the our Discord channel.</p>"},{"location":"contributing/#bugs","title":"Bugs","text":"<p>If you find a bug in the source code, you can help us by submitting an issue to our GitHub Repository. Even better, you can submit a Pull Request with a fix.</p>"},{"location":"contributing/#feature-suggestion","title":"Feature Suggestion","text":"<p>You can request a new feature by submitting an issue to our GitHub Repository.</p> <p>If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that we can use it. Please consider what kind of change it is:</p> <ul> <li> <p>For a Major Feature, first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you craft the change so that it's successfully integrated in the project.</p> </li> <li> <p>Small Features can be added directly submitted as a Pull Request.</p> </li> </ul>"},{"location":"contributing/#what-do-i-need-to-know-to-help","title":"What do I need to know to help?","text":"<p>If you want to help out with a code contribution, our project uses the following stack:</p>"},{"location":"contributing/#server-side","title":"Server-side","text":"<ul> <li>Node.JS</li> </ul>"},{"location":"contributing/#how-do-i-make-a-contribution","title":"How do I make a contribution?","text":"<p>Never made an open source contribution before? Wondering how contributions work in the in our project? Here's a quick rundown!</p> <p>Find an issue that you're interested in addressing, or a feature that you'd like to add. You can use this view which helps new contributors find easy gateways into our project.</p> <p>Fork the repository associated with the issue to your local GitHub organization. This means that you'll have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine:</p> <pre><code>git clone https://supratimneogi007:&lt;password&gt;@bitbucket.org/supratimneogi007/pi-node-cli.git\n</code></pre> <p>Create a new branch for your fix:</p> <pre><code>git checkout -b branch-name-here\n</code></pre> <p>Make the appropriate changes for the issue you are trying to address or the feature that you want to add.</p> <p>Once done, stage the changes that are ready to be committed:</p> <pre><code>git add .\n</code></pre> <p>Commit the changes with a short message.</p> <pre><code>git commit -m \"&lt;type&gt;:&lt;package&gt;:&lt;message&gt;\"\n</code></pre> <p>CLI for better commit messages</p> <pre><code>npm run commit\n</code></pre> <p>Push the changes to the remote repository using:</p> <pre><code>git push origin branch-name-here\n</code></pre>"},{"location":"contributing/#branch-guidelines","title":"Branch Guidelines","text":"<ol> <li>If you are fixing a bug, start the branch name with bug/bug-name</li> <li>If you are adding a feature, start the branch name with feature/feature-name</li> <li>Submit you branch to master by creating a PR.</li> </ol> <p>In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer.</p> <p>It's okay if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it!</p> <p>Wait for the pull request to be reviewed by a maintainer.</p> <p>Make changes to the pull request if the reviewing maintainer recommends them.</p> <p>Celebrate your success after your pull request is merged!</p>"},{"location":"contributing/#git-commit-messages","title":"Git Commit Messages","text":"<p>We structure our commit messages like this:</p> <pre><code>&lt;type&gt;(&lt;package&gt;): &lt;subject&gt;\n</code></pre> <p>Example</p> <pre><code>fix(server): missing entity on init\n</code></pre> <p>List of types:</p> <ul> <li>feat: A new feature</li> <li>fix: A bug fix</li> <li>docs: Changes to the documentation</li> <li>refactor: A code change that neither fixes a bug nor adds a feature</li> <li>perf: A code change that improves performance</li> <li>test: Adding missing or correcting existing tests</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of conduct","text":"<p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p> <p>Code of Conduct</p> <p>Our Code of Conduct means that you are responsible for treating everyone on the project with respect and courtesy.</p>"},{"location":"development/","title":"Development Documentation","text":"<p>This document provides a comprehensive guide for developers who want to contribute to or extend this CLI tool.</p>"},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Project Overview</li> <li>Project Structure</li> <li>Getting Started</li> <li>Core Components</li> <li>Adding New Templates</li> <li>Extending Functionality</li> <li>Contribution Guidelines</li> </ol>"},{"location":"development/#project-overview","title":"Project Overview","text":"<p>This CLI tool is designed to scaffold Node.js applications with different architecture patterns (MVC or Clean Code) and different database options (Mongoose/MongoDB or Sequelize/SQL). It helps developers quickly set up new projects with boilerplate code, create models, modules, and APIs.</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>The project is organized as follows:</p> <pre><code>.\n\u251c\u2500\u2500 bin/                   # CLI entry points and commands\n\u251c\u2500\u2500 constant/              # Constants used across the application\n\u251c\u2500\u2500 questions/             # CLI prompt questions\n\u251c\u2500\u2500 repository/            # Core logic for generating code\n\u251c\u2500\u2500 setting/               # Configuration settings\n\u251c\u2500\u2500 templates/             # Template files for code generation\n\u2502   \u251c\u2500\u2500 mongoose_cc/       # MongoDB with Clean Code architecture\n\u2502   \u251c\u2500\u2500 mongoose_mvc/      # MongoDB with MVC architecture\n\u2502   \u251c\u2500\u2500 sequelize_cc/      # Sequelize with Clean Code architecture\n\u2502   \u2514\u2500\u2500 sequelize_mvc/     # Sequelize with MVC architecture\n\u251c\u2500\u2500 utils/                 # Utility functions\n\u251c\u2500\u2500 writeOperations/       # File write operations\n\u251c\u2500\u2500 codeGenerator.js       # Code generation logic\n\u2514\u2500\u2500 index.js               # Main entry point\n</code></pre>"},{"location":"development/#getting-started","title":"Getting Started","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (v12 or higher)</li> <li>npm or yarn</li> </ul>"},{"location":"development/#installation-for-development","title":"Installation for Development","text":"<ol> <li> <p>Clone the repository:    <code>git clone &lt;repository-url&gt;    cd &lt;repository-name&gt;</code></p> </li> <li> <p>Install dependencies:    <code>npm install</code></p> </li> <li> <p>Link the package globally to test it locally:    <code>npm link</code></p> </li> </ol>"},{"location":"development/#core-components","title":"Core Components","text":""},{"location":"development/#1-entry-points-bin","title":"1. Entry Points (bin/)","text":"<p>The <code>bin</code> directory contains the entry points for different CLI commands:</p> <ul> <li><code>create-app.js</code>: Creates a new application with boilerplate code</li> <li><code>create-model.js</code>: Generates a new model</li> <li><code>create-module.js</code>: Scaffolds a new module</li> <li><code>create-api.js</code>: Generates a new API endpoint</li> <li><code>index.js</code>: Main CLI command handler</li> </ul>"},{"location":"development/#2-repository-repository","title":"2. Repository (repository/)","text":"<p>The repository directory contains the core logic for different generation tasks:</p> <ul> <li><code>api.js</code>: API generation logic</li> <li><code>boilerplate.js</code>: Boilerplate setup</li> <li><code>model.js</code>: Model generation</li> <li><code>module.js</code>: Module creation</li> <li><code>render.js</code>: Template rendering</li> </ul>"},{"location":"development/#3-templates-templates","title":"3. Templates (templates/)","text":"<p>Templates are organized by database type and architecture pattern:</p> <ul> <li>Database options: <code>mongoose</code> (MongoDB) or <code>sequelize</code> (SQL)</li> <li>Architecture options: <code>cc</code> (Clean Code) or <code>mvc</code> (Model-View-Controller)</li> </ul> <p>Each template category contains: - <code>boilerplate/</code>: Complete project structure - <code>customAPI/</code>: API endpoint templates - <code>model/</code>: Data model templates - <code>module/</code>: Module templates</p>"},{"location":"development/#adding-new-templates","title":"Adding New Templates","text":"<p>To add new templates:</p> <ol> <li>Create a new directory in the appropriate template category (<code>templates/&lt;db&gt;_&lt;architecture&gt;/</code>)</li> <li>Add your template files with placeholders using syntax that can be replaced during generation</li> <li>Update the questions (<code>questions/index.js</code>) to include options for your new templates</li> <li>Extend the repository logic to handle your new template type</li> </ol>"},{"location":"development/#template-placeholders","title":"Template Placeholders","text":"<p>Templates use placeholders that get replaced during generation:</p> <ul> <li><code>{{modelName}}</code>: Name of the model</li> <li><code>{{moduleName}}</code>: Name of the module</li> <li><code>{{apiName}}</code>: Name of the API endpoint</li> </ul> <p>Example of adding a new template:</p> <pre><code>// Add template option in questions/index.js\nconst dbOptions = [\n  { name: 'Mongoose (MongoDB)', value: 'mongoose' },\n  { name: 'Sequelize (SQL)', value: 'sequelize' },\n  { name: 'Your New Option', value: 'new_option' } // Add new option here\n];\n</code></pre>"},{"location":"development/#extending-functionality","title":"Extending Functionality","text":""},{"location":"development/#adding-a-new-command","title":"Adding a New Command","text":"<ol> <li>Create a new file in the <code>bin/</code> directory (e.g., <code>create-something.js</code>)</li> <li>Add the command to <code>bin/index.js</code></li> <li>Implement the required questions in <code>questions/index.js</code></li> <li>Create repository logic in <code>repository/</code> directory</li> <li>Add template files in the appropriate template directories</li> </ol> <p>Example of a new command implementation:</p> <pre><code>// bin/create-something.js\n#!/usr/bin/env node\nconst program = require('commander');\nconst questions = require('../questions');\nconst repository = require('../repository/something');\n\nprogram\n  .description('Create a new something')\n  .action(async () =&gt; {\n    const answers = await questions.askSomethingQuestions();\n    repository.createSomething(answers);\n  });\n\nprogram.parse(process.argv);\n</code></pre>"},{"location":"development/#modifying-code-generation-logic","title":"Modifying Code Generation Logic","text":"<p>The code generation logic is primarily in <code>codeGenerator.js</code> and the files in the <code>repository/</code> directory. To modify:</p> <ol> <li>Understand the existing flow through <code>codeGenerator.js</code></li> <li>Modify the appropriate repository file for specific generation logic</li> <li>Update or add utility functions in <code>utils/index.js</code> as needed</li> <li>Modify file write operations in <code>writeOperations/index.js</code> if necessary</li> </ol>"},{"location":"development/#contribution-guidelines","title":"Contribution Guidelines","text":"<ol> <li>Fork the repository and create a new branch for your feature/fix</li> <li>Make your changes</li> <li>Run tests (if available)</li> <li>Submit a pull request with a clear description of your changes</li> </ol>"},{"location":"development/#code-style","title":"Code Style","text":"<ul> <li>Follow consistent indentation (preferably 2 spaces)</li> <li>Use meaningful variable and function names</li> <li>Comment your code where necessary</li> <li>Follow existing patterns in the codebase</li> </ul>"},{"location":"development/#testing","title":"Testing","text":"<p>Before submitting your changes, test the CLI thoroughly: - Test all existing commands - Test your new features/changes - Verify that generation works correctly for all template types</p>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues:</p> <ol> <li>Command not found: Make sure you've run <code>npm link</code> after changes</li> <li>Generation errors: Check template paths and ensure all required files exist</li> <li>Template rendering issues: Verify your template placeholders match the expected format</li> </ol>"},{"location":"development/#license","title":"License","text":"<p>This project is licensed under the terms specified in the LICENSE file.</p>"},{"location":"development_fresher_guide/","title":"Comprehensive Development Guide for Freshers","text":"<p>Welcome to the DhiWise Node CLI project! This guide provides detailed instructions for newcomers to understand the project architecture, development workflow, and contribution process.</p>"},{"location":"development_fresher_guide/#what-is-dhiwise-node-cli","title":"What is DhiWise Node CLI?","text":"<p>DhiWise Node CLI is a powerful code generation tool that bootstraps production-ready Node.js applications following industry best practices. It dramatically reduces boilerplate coding and helps maintain consistent architecture across projects.</p>"},{"location":"development_fresher_guide/#supported-frameworks-and-architectures","title":"Supported Frameworks and Architectures","text":"Database ORM Architecture Patterns Features Mongoose (MongoDB) Clean Code Architecture \u2022 REST API scaffolding\u2022 Model generation\u2022 Authentication setup\u2022 CRUD operations Mongoose (MongoDB) MVC Architecture \u2022 Controller-based routing\u2022 View integration\u2022 Express middleware setup Sequelize (SQL) Clean Code Architecture \u2022 Database migrations\u2022 Complex relationships\u2022 Transaction support\u2022 Typescript support Sequelize (SQL) MVC Architecture \u2022 Structured module organization\u2022 Separation of concerns\u2022 Extensible codebase"},{"location":"development_fresher_guide/#project-architecture-deep-dive","title":"Project Architecture Deep Dive","text":"<pre><code>dhiwise-node-cli/\n\u251c\u2500\u2500 bin/                  # Command executables - entry points for CLI commands\n\u2502   \u251c\u2500\u2500 create-api.js     # API generator command\n\u2502   \u251c\u2500\u2500 create-app.js     # Application scaffold generator\n\u2502   \u251c\u2500\u2500 create-model.js   # Database model generator\n\u2502   \u2514\u2500\u2500 create-module.js  # Module generator for existing applications\n\u2502\n\u251c\u2500\u2500 constant/             # Application constants and configuration\n\u2502   \u251c\u2500\u2500 astConstant.js    # Abstract Syntax Tree constants for code generation\n\u2502   \u2514\u2500\u2500 index.js          # Exported constants\n\u2502\n\u251c\u2500\u2500 questions/            # Interactive prompts for CLI users\n\u2502   \u2514\u2500\u2500 index.js          # Question definitions using Inquirer.js\n\u2502\n\u251c\u2500\u2500 repository/           # Core business logic for code generation\n\u2502   \u251c\u2500\u2500 api.js            # API endpoint generation logic\n\u2502   \u251c\u2500\u2500 boilerplate.js    # Project structure generation\n\u2502   \u251c\u2500\u2500 model.js          # Data model generation\n\u2502   \u251c\u2500\u2500 module.js         # Feature module generation\n\u2502   \u2514\u2500\u2500 render.js         # Template rendering utilities\n\u2502\n\u251c\u2500\u2500 setting/              # Configuration settings for different templates\n\u2502   \u2514\u2500\u2500 index.js          # Settings loader\n\u2502\n\u251c\u2500\u2500 templates/            # Template files for different architectures\n\u2502   \u251c\u2500\u2500 mongoose_cc/      # Mongoose Clean Code templates\n\u2502   \u251c\u2500\u2500 mongoose_mvc/     # Mongoose MVC templates\n\u2502   \u251c\u2500\u2500 sequelize_cc/     # Sequelize Clean Code templates\n\u2502   \u2514\u2500\u2500 sequelize_mvc/    # Sequelize MVC templates\n\u2502\n\u251c\u2500\u2500 utils/                # Utility functions\n\u2502   \u251c\u2500\u2500 deploy_docs.sh    # Documentation deployment script\n\u2502   \u2514\u2500\u2500 index.js          # General utilities\n\u2502\n\u2514\u2500\u2500 writeOperations/      # File system operations for code generation\n    \u2514\u2500\u2500 index.js          # File writing utilities\n</code></pre>"},{"location":"development_fresher_guide/#technical-setup-guide","title":"Technical Setup Guide","text":""},{"location":"development_fresher_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js: v14.x or higher (v16.x recommended)</li> <li>npm: v7.x or higher OR yarn: v1.22.x or higher</li> <li>Git: Latest version for version control</li> <li>Code Editor: VSCode recommended with ESLint and Prettier extensions</li> <li>Terminal: Bash, Zsh, or PowerShell</li> </ul>"},{"location":"development_fresher_guide/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li>Fork the Repository:</li> <li> <p>Visit the GitHub repository and click \"Fork\" to create your own copy</p> </li> <li> <p>Clone your fork:    <code>bash    git clone https://github.com/supratimneogi/nodejs-cli.git    cd nodejs-cli</code></p> </li> <li> <p>Install Dependencies:    <code>bash    npm install    # OR with yarn    yarn install</code></p> </li> <li> <p>Set up Git Hooks (if available):    <code>bash    npm run prepare    # This sets up husky for pre-commit hooks</code></p> </li> <li> <p>Link the CLI locally:    <code>bash    npm link    # Now you can use commands like 'create-app' directly</code></p> </li> <li> <p>Verify Installation:    <code>bash    create-app --version    # Should display the current version number</code></p> </li> </ol>"},{"location":"development_fresher_guide/#code-flow-walkthrough","title":"Code Flow Walkthrough","text":"<p>Understanding how code flows through the CLI is critical:</p> <ol> <li>Command Execution:</li> <li>User runs a command like <code>create-app my-project</code></li> <li><code>bin/create-app.js</code> serves as the entry point</li> <li> <p>The command parses arguments using <code>commander.js</code></p> </li> <li> <p>User Input Collection:</p> </li> <li><code>questions/index.js</code> contains Inquirer.js prompts</li> <li>CLI asks for project name, architecture, database, etc.</li> <li> <p>Responses are collected in a configuration object</p> </li> <li> <p>Template Selection:</p> </li> <li>Based on user choices, templates are selected from <code>templates/</code></li> <li> <p><code>repository/boilerplate.js</code> determines which files to include</p> </li> <li> <p>Code Generation Process:</p> </li> <li>Copy Phase: Boilerplate files are copied from templates</li> <li>Modification Phase: Files are modified based on user inputs</li> <li>AST Transformation: Code structure is manipulated using Abstract Syntax Trees</li> <li> <p>Writing Phase: Final code is written to the target directory</p> </li> <li> <p>Post-Processing:</p> </li> <li>Package dependencies are installed</li> <li>Git repository is initialized (if requested)</li> <li>Success message with next steps is displayed</li> </ol>"},{"location":"development_fresher_guide/#key-files-deep-dive","title":"Key Files Deep Dive","text":""},{"location":"development_fresher_guide/#binindexjs","title":"<code>bin/index.js</code>","text":"<p>Entry point for all CLI commands. Registers subcommands and parses arguments.</p>"},{"location":"development_fresher_guide/#questionsindexjs","title":"<code>questions/index.js</code>","text":"<p>Defines interactive prompts using Inquirer.js with validation logic and conditional questions.</p>"},{"location":"development_fresher_guide/#repositoryapijs","title":"<code>repository/api.js</code>","text":"<p>Generates API endpoints with routes, controllers, and validation based on models.</p>"},{"location":"development_fresher_guide/#repositorymodeljs","title":"<code>repository/model.js</code>","text":"<p>Creates database models with proper schema definitions, validations, and relationships.</p>"},{"location":"development_fresher_guide/#templatesboilerplate","title":"<code>templates/*/boilerplate/</code>","text":"<p>Contains foundational project structure including config files, server setup, middleware configuration.</p>"},{"location":"development_fresher_guide/#making-effective-contributions","title":"Making Effective Contributions","text":""},{"location":"development_fresher_guide/#step-1-find-an-issue-or-feature","title":"Step 1: Find an Issue or Feature","text":"<ul> <li>Check GitHub issues for \"good first issue\" labels</li> <li>Identify bugs you can fix or features you'd like to add</li> <li>Discuss your approach in the issue before starting work</li> </ul>"},{"location":"development_fresher_guide/#step-2-create-a-feature-branch","title":"Step 2: Create a Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# OR\ngit checkout -b fix/issue-you-are-fixing\n</code></pre>"},{"location":"development_fresher_guide/#step-3-development-workflow","title":"Step 3: Development Workflow","text":"<ol> <li>Make your changes following the project's coding style</li> <li>Test thoroughly with different inputs and scenarios</li> <li>Add comments explaining complex logic</li> <li>Update relevant documentation</li> </ol>"},{"location":"development_fresher_guide/#step-4-testing-your-changes","title":"Step 4: Testing Your Changes","text":"<pre><code># Link your development version\nnpm link\n\n# Test creating a new application\ncreate-app test-app --framework mongoose --architecture cc\n\n# Test creating a model\ncd test-app\ncreate-model User --fields \"name:String,email:String,age:Number\"\n\n# Test creating an API\ncreate-api User --operations \"create,find,update,delete\"\n</code></pre>"},{"location":"development_fresher_guide/#step-5-prepare-your-pull-request","title":"Step 5: Prepare Your Pull Request","text":"<ol> <li>Ensure code passes all tests</li> <li>Update documentation if needed</li> <li>Write a clear commit message</li> <li>Push your branch to your fork</li> <li>Create a Pull Request with a detailed description</li> </ol>"},{"location":"development_fresher_guide/#advanced-topics","title":"Advanced Topics","text":""},{"location":"development_fresher_guide/#custom-template-development","title":"Custom Template Development","text":"<p>To create custom templates: 1. Study existing templates in <code>templates/</code> directory 2. Create a new directory structure following naming patterns 3. Update <code>repository/boilerplate.js</code> to include your template 4. Add relevant questions in <code>questions/index.js</code></p>"},{"location":"development_fresher_guide/#abstract-syntax-tree-ast-manipulation","title":"Abstract Syntax Tree (AST) Manipulation","text":"<p>DhiWise CLI uses AST to generate and modify code: 1. Code parsing using tools like <code>@babel/parser</code> 2. AST traversal and modification with <code>@babel/traverse</code> 3. Code generation from modified AST with <code>@babel/generator</code></p> <p>Example AST modification:</p> <pre><code>// simplified example of adding a route to express router\nconst { parse } = require('@babel/parser');\nconst { default: traverse } = require('@babel/traverse');\nconst { default: generate } = require('@babel/generator');\n\nconst sourceCode = `\nconst router = express.Router();\nmodule.exports = router;\n`;\n\nconst ast = parse(sourceCode, { sourceType: 'module' });\n\ntraverse(ast, {\n  AssignmentExpression(path) {\n    if (path.node.left.name === 'module' &amp;&amp; \n        path.node.left.property.name === 'exports') {\n      // Add new route before export\n      path.insertBefore(parse(`\n        router.get('/newRoute', controller.newMethod);\n      `).program.body[0]);\n    }\n  }\n});\n\nconst output = generate(ast);\nconsole.log(output.code);\n</code></pre>"},{"location":"development_fresher_guide/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"development_fresher_guide/#command-not-found-after-npm-link","title":"\"Command not found\" after npm link","text":"<p>Solution: Make sure global npm bin directory is in your PATH.</p> <pre><code>export PATH=\"$PATH:$(npm config get prefix)/bin\"\n</code></pre>"},{"location":"development_fresher_guide/#template-files-not-generating-correctly","title":"Template files not generating correctly","text":"<p>Solution: Check permissions and path structure:</p> <pre><code># Set proper permissions\nchmod -R 755 ./templates\n\n# Check file paths are correct for your OS\n# Windows paths may need adjustment\n</code></pre>"},{"location":"development_fresher_guide/#error-when-running-ast-transformations","title":"Error when running AST transformations","text":"<p>Solution: Verify babel dependencies are installed:</p> <pre><code>npm install --save-dev @babel/parser @babel/traverse @babel/generator\n</code></pre>"},{"location":"development_fresher_guide/#learning-path-for-mastery","title":"Learning Path for Mastery","text":"<ol> <li>Week 1-2: Study project structure and run basic commands</li> <li>Week 3-4: Make simple documentation improvements and bug fixes</li> <li>Week 5-6: Modify existing templates and add new features</li> <li>Week 7-8: Create custom templates and contribute major features</li> </ol>"},{"location":"development_fresher_guide/#community-resources","title":"Community Resources","text":"<ul> <li>Discord Channel: Join our developer community</li> <li>Weekly Hours: 2 hrs atleast</li> <li>Development Blog: Updates and tutorials</li> <li>Contribution Leaderboard: Recognition for active contributors</li> </ul> <p>Remember, everyone starts somewhere! Don't hesitate to ask questions, and your contributions\u2014no matter how small\u2014are valued and appreciated.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"installation/","title":"Installation","text":"<p> DhiWise Node Generator  <p>  DhiWise Node generator is a development package to quickly generate Node APIs and Module which includes route, controller, model and joi validation. It helps you to speed up productivity in back-end projects such as node-mongoose and node-sequelize with clean-code and mvc architecture.  Visit https://www.dhiwise.com/node for more details.   ## How it works ?  DhiWise Node generator requires your basic inputs and a few pre-defined configurations. From those configurations DhiWise CLI engine works to create a custom template for your Node.js application, it automates the most basic and menial task which takes developers days and weeks to program. The code it generates is more than just a boilerplate. It is a production-ready code!    ## Support &amp; community If you have any issue or idea or question, share it with us via any of the below options and we will help you asap -    * Support and feedback - Discord | Canny | Email  * GitHub Issues - GitHub  * Follow product updates - @dhiwise </p>  ##  Table of Contents  * [Installation](#installation) * [Get Started](#get-started)  ##  Installation  To install the latest version run the following command:   <pre><code>npm i -g @dhiwise/node-generator\n</code></pre>    ##  Get Started  DhiWise Node Code Generator provides the following command to generate the code:   <pre><code>dhi create-app\n</code></pre>   above command will use to generate more than boilerplate application (which includes two platform: admin and device,  user model,authentication and authorization, seeders, user controller with CRUD and many others methods and route and joi validation file)  <pre><code>dhi create-model\n</code></pre>    above command will ask you for the model name and attribute. it will generate single model file in the model directory of your project.  <pre><code>dhi create-api\n</code></pre>   above command will use to create single API in your specific platform or module.  <pre><code>dhi create-module\n</code></pre>   above command will use to generate whole module (which include model, controller with CRUD and many others methods, route and joi validation file) in the particular platform.    ## Contributions Want to report a bug or have a great feature to contribute? Check out our contributing guide for more details.  ## Stay up to date We occasionally send out product and technology updates. Get the latest from DhiWise by subscribing to our newsletter. Signup to our newsletter using link below :  https://www.dhiwise.com/subscription  ## Jobs If you are interested in working for DhiWise, click here to see open positions.  ## License DhiWise is\u00a0distributed under\u00a0Apache 2.0 with Commons Clause\u00a0license."},{"location":"sequelize_cc_typescript/","title":"Sequelize Clean Code TypeScript Implementation Guide","text":"<p>This document provides guidance for extending the CLI tool to support TypeScript with Sequelize using the Clean Code architecture pattern.</p>"},{"location":"sequelize_cc_typescript/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Implementation Steps</li> <li>Directory Structure</li> <li>Required Changes</li> <li>Templates Creation</li> <li>Testing the Implementation</li> </ol>"},{"location":"sequelize_cc_typescript/#overview","title":"Overview","text":"<p>Adding TypeScript support for Sequelize with Clean Code architecture involves:</p> <ol> <li>Creating a new template category (<code>sequelize_cc_typescript</code>)</li> <li>Modifying the existing constants and questions to include the new option</li> <li>Updating the code generator to handle TypeScript-specific aspects</li> <li>Creating TypeScript-specific templates for models, APIs, and modules</li> </ol>"},{"location":"sequelize_cc_typescript/#implementation-steps","title":"Implementation Steps","text":""},{"location":"sequelize_cc_typescript/#1-create-the-new-template-structure","title":"1. Create the New Template Structure","text":"<p>Create a new directory structure for the TypeScript templates:</p> <pre><code>templates/\n  \u2514\u2500\u2500 sequelize_cc_typescript/\n      \u251c\u2500\u2500 boilerplate/\n      \u251c\u2500\u2500 customAPI/\n      \u251c\u2500\u2500 model/\n      \u2514\u2500\u2500 module/\n</code></pre>"},{"location":"sequelize_cc_typescript/#2-update-constants","title":"2. Update Constants","text":"<p>Extend the constants in <code>constant/index.js</code> to include TypeScript options:</p> <pre><code>module.exports = {\n    // ...existing code...\n    ORM: {\n        SEQUELIZE: \"sequelize\",\n        MONGOOSE: \"mongoose\",\n        SEQUELIZE_TS: \"sequelize_ts\" // Add this new option\n    },\n    // ...existing code...\n}\n</code></pre>"},{"location":"sequelize_cc_typescript/#3-modify-questions","title":"3. Modify Questions","text":"<p>Update the question prompts in <code>questions/index.js</code> to include the TypeScript option:</p> <pre><code>SELECT_ORM_TYPE: {\n    type: 'select',\n    name: 'value',\n    message: 'Select Your ORM Type',\n    choices: [\n        { title: 'Mongoose', value: constant.ORM.MONGOOSE },\n        { title: 'Sequelize', value: constant.ORM.SEQUELIZE },\n        { title: 'Sequelize with TypeScript', value: constant.ORM.SEQUELIZE_TS },\n    ],\n    hint: '- Space to select. Return to submit'\n}\n</code></pre>"},{"location":"sequelize_cc_typescript/#4-update-code-generator","title":"4. Update Code Generator","text":"<p>Modify <code>codeGenerator.js</code> to handle the TypeScript-specific aspects:</p> <pre><code>// Handle TypeScript-specific generation\nif (this.ormType === constant.ORM.SEQUELIZE_TS) {\n    // TypeScript-specific handling\n}\n</code></pre>"},{"location":"sequelize_cc_typescript/#directory-structure","title":"Directory Structure","text":"<p>The TypeScript template structure should include:</p>"},{"location":"sequelize_cc_typescript/#boilerplate-structure","title":"Boilerplate Structure","text":"<pre><code>boilerplate/\n  \u251c\u2500\u2500 .env\n  \u251c\u2500\u2500 .eslintrc.js\n  \u251c\u2500\u2500 .gitignore\n  \u251c\u2500\u2500 app.ts\n  \u251c\u2500\u2500 tsconfig.json\n  \u251c\u2500\u2500 package.json\n  \u251c\u2500\u2500 README.md\n  \u251c\u2500\u2500 constants/\n  \u251c\u2500\u2500 controller/\n  \u251c\u2500\u2500 data-access/\n  \u251c\u2500\u2500 db/\n  \u251c\u2500\u2500 entities/\n  \u251c\u2500\u2500 helpers/\n  \u251c\u2500\u2500 middleware/\n  \u251c\u2500\u2500 routes/\n  \u251c\u2500\u2500 seeders/\n  \u251c\u2500\u2500 services/\n  \u251c\u2500\u2500 use-case/\n  \u2514\u2500\u2500 types/\n</code></pre>"},{"location":"sequelize_cc_typescript/#key-typescript-specific-files","title":"Key TypeScript-Specific Files","text":"<ol> <li><code>tsconfig.json</code> - TypeScript configuration</li> <li><code>types/</code> directory - For type definitions</li> <li><code>.d.ts</code> files - Type declaration files</li> </ol>"},{"location":"sequelize_cc_typescript/#required-changes","title":"Required Changes","text":""},{"location":"sequelize_cc_typescript/#1-modify-setting","title":"1. Modify Setting","text":"<p>Update <code>setting/index.js</code> to include paths for TypeScript files:</p> <pre><code>if (ormType === constant.ORM.SEQUELIZE_TS) {\n    // Configure TypeScript-specific paths\n}\n</code></pre>"},{"location":"sequelize_cc_typescript/#2-repository-logic","title":"2. Repository Logic","text":"<p>Extend the repository classes to handle TypeScript file generation:</p> <ol> <li>Update model generation for TypeScript</li> <li>Modify API generation to use TypeScript syntax</li> <li>Update module generation to include TypeScript interfaces</li> </ol>"},{"location":"sequelize_cc_typescript/#3-template-files","title":"3. Template Files","text":"<p>Create TypeScript versions of all template files:</p> <ul> <li>Convert JavaScript templates to TypeScript</li> <li>Add type definitions and interfaces</li> <li>Use TypeScript-specific ORM features</li> </ul>"},{"location":"sequelize_cc_typescript/#templates-creation","title":"Templates Creation","text":""},{"location":"sequelize_cc_typescript/#model-templates","title":"Model Templates","text":"<p>Create a TypeScript model template (<code>model.ts.hbs</code>):</p> <pre><code>// Example model template\nimport { Model, DataTypes, Optional } from 'sequelize';\nimport sequelize from '../db/sequelize';\n\ninterface {{modelName}}Attributes {\n  id: number;\n  {{#each attributes}}\n  {{name}}: {{type}};\n  {{/each}}\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\ninterface {{modelName}}CreationAttributes extends Optional&lt;{{modelName}}Attributes, 'id'&gt; {}\n\nclass {{modelName}} extends Model&lt;{{modelName}}Attributes, {{modelName}}CreationAttributes&gt; implements {{modelName}}Attributes {\n  public id!: number;\n  {{#each attributes}}\n  public {{name}}!: {{type}};\n  {{/each}}\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n}\n\n{{modelName}}.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    {{#each attributes}}\n    {{name}}: {\n      type: {{sequelizeType}},\n      {{#if allowNull}}\n      allowNull: true,\n      {{else}}\n      allowNull: false,\n      {{/if}}\n    },\n    {{/each}}\n  },\n  {\n    sequelize,\n    tableName: '{{tableName}}',\n  }\n);\n\nexport default {{modelName}};\n</code></pre>"},{"location":"sequelize_cc_typescript/#controller-templates","title":"Controller Templates","text":"<p>Create TypeScript controller templates:</p> <pre><code>import { Request, Response, NextFunction } from 'express';\nimport { {{modelName}}Service } from '../services';\n\nexport const create{{modelName}} = async (req: Request, res: Response, next: NextFunction): Promise&lt;void&gt; =&gt; {\n  try {\n    const result = await {{modelName}}Service.create(req.body);\n    res.status(201).json(result);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Other controller methods...\n</code></pre>"},{"location":"sequelize_cc_typescript/#testing-the-implementation","title":"Testing the Implementation","text":""},{"location":"sequelize_cc_typescript/#1-manual-testing","title":"1. Manual Testing","text":"<ol> <li>Add a TypeScript template option</li> <li>Generate a model using the TypeScript template</li> <li>Generate an API using the TypeScript template</li> <li>Generate a module using the TypeScript template</li> <li>Test the generated code in a TypeScript project</li> </ol>"},{"location":"sequelize_cc_typescript/#2-integration-with-existing-cli","title":"2. Integration with Existing CLI","text":"<p>Ensure that the TypeScript option works with all existing commands:</p> <ul> <li><code>create-app</code> - Create a TypeScript project</li> <li><code>create-model</code> - Generate TypeScript models</li> <li><code>create-api</code> - Generate TypeScript APIs</li> <li><code>create-module</code> - Generate TypeScript modules</li> </ul>"},{"location":"sequelize_cc_typescript/#common-typescript-types-for-sequelize","title":"Common TypeScript Types for Sequelize","text":"<pre><code>// Common types for Sequelize models\ntype StringType = string;\ntype NumberType = number;\ntype BooleanType = boolean;\ntype DateType = Date;\ntype JSONType = Record&lt;string, any&gt;;\ntype ArrayType&lt;T&gt; = T[];\n\n// Sequelize-specific types\nimport { Model, DataTypes, ModelCtor } from 'sequelize';\n</code></pre>"},{"location":"sequelize_cc_typescript/#best-practices-for-typescript-implementation","title":"Best Practices for TypeScript Implementation","text":"<ol> <li>Use interfaces to define model attributes</li> <li>Leverage TypeScript's type system for function parameters and return types</li> <li>Create separate type definition files when needed</li> <li>Use generic types for reusable components</li> <li>Add proper error typing for error handling</li> </ol>"},{"location":"sequelize_cc_typescript/#troubleshooting","title":"Troubleshooting","text":""},{"location":"sequelize_cc_typescript/#common-issues","title":"Common Issues","text":"<ol> <li>Type errors in generated code: Review template type definitions</li> <li>Path resolution problems: Check TypeScript path configuration in tsconfig.json</li> <li>Import/export issues: Ensure proper ES module syntax</li> <li>ORM-specific type problems: Check Sequelize TypeScript documentation</li> </ol>"},{"location":"sequelize_cc_typescript/#solutions","title":"Solutions","text":"<ol> <li>Create robust type definitions in separate <code>.d.ts</code> files</li> <li>Use TypeScript path aliases for cleaner imports</li> <li>Add comments to generated code explaining type usage</li> <li>Include TypeScript-specific documentation in generated README files</li> </ol>"}]}